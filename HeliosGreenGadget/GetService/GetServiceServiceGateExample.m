/*
 GetServiceServiceGateExample.m
 Provides example and test runs the service's proxy methods.
 Generated by SudzC.com
 */
#import "GetServiceServiceGateExample.h"
#import "comAppDelegate.h"
#import "XMLreader.h"

@implementation GetServiceServiceGateExample

@synthesize service = _service;
@synthesize sessionToken = _sessionToken;

- (void)run {
    comAppDelegate *d = (comAppDelegate*)[[UIApplication sharedApplication] delegate];
    
	// Create the service
	_service = [GetServiceServiceGate service];
	_service.logging = YES;
    _service.serviceUrl = [d.URLSOAP stringByAppendingString:@"/servicegate.asmx"];
	_service.username = [d.defaults stringForKey:@"username"];
	_service.password = [d.defaults stringForKey:@"password"];
    
	// Returns NSString*. 
	[_service LogOn:self action:@selector(LogOnHandler:) profile: [d.defaults stringForKey:@"profil"] username: [d.defaults stringForKey:@"username"] password: [d.defaults stringForKey:@"password"] language: [d.defaults stringForKey:@"lang_gadget"] options: @""];
}



// Handle the response from KeepAlive.

- (void) KeepAliveHandler: (id) value {
    
	// Handle errors
	if([value isKindOfClass:[NSError class]]) {
		NSLog(@"ERROR KeepAlive:%@", value);
		return;
	}
    
	// Handle faults
	if([value isKindOfClass:[SoapFault class]]) {
		NSLog(@"FAULT KeepAlive:%@", value);
		return;
	}				
    
    
	// Do something with the NSString* result
    NSString* result = (NSString*)value;
	NSLog(@"KeepAlive returned the value: %@", result);
    
}


// Handle the response from LogOff.

- (void) LogOffHandler: (id) value {
    
	// Handle errors
	if([value isKindOfClass:[NSError class]]) {
		NSLog(@"ERROR LogOff:%@", value);
		return;
	}
    
	// Handle faults
	if([value isKindOfClass:[SoapFault class]]) {
		NSLog(@"FAULT LogOff:%@", value);
		return;
	}				
    
    
	// Do something with the NSString* result
    NSString* result = (NSString*)value;
	NSLog(@"LogOff returned the value: %@", result);
    if ([result isEqualToString:@"1"]){
        _sessionToken = @"";
    }
    
}


// Handle the response from LogOn.

- (void) LogOnHandler: (id) value {
    
	// Handle errors
	if([value isKindOfClass:[NSError class]]) {
		NSLog(@"ERROR LogOn:%@", value);
		return;
	}
    
	// Handle faults
	if([value isKindOfClass:[SoapFault class]]) {
		NSLog(@"FAULT LogOn:%@", value);
		return;
	}				
    
    
	// Do something with the NSString* result
    NSString* result = (NSString*)value;
    NSArray *sesions = [result componentsSeparatedByString:@","];
    if ([sesions count]>0){
        _sessionToken = [sesions objectAtIndex:0];
        if ([_sessionToken hasPrefix:@"ERROR:"]){
            NSLog(@"LogOn returned the ERROR value: %@", result);
            comAppDelegate *d = (comAppDelegate*)[[UIApplication sharedApplication] delegate];
            [d logon];
        }
        else {
            
            // zadost o seznam gadgetu 
            NSString *string = @"<RUN FUNCTIONID=\"5608\"></RUN>";
            
            [_service ProcessXml:self action:@selector(ProcessXmlHandler:) sessionToken: _sessionToken inputXml: string];  
        }
    }
}


// Handle the response from ProcessXml.

- (void) ProcessXmlHandler: (id) value {
    
	// Handle errors
	if([value isKindOfClass:[NSError class]]) {
		NSLog(@"ERROR ProcessXML:%@", value);
		return;
	}
    
	// Handle faults
	if([value isKindOfClass:[SoapFault class]]) {
		NSLog(@"FAULT ProccesXML:%@", value);
		return;
	}				
    
    
	// Do something with the NSString* result
    NSString* result = (NSString*)value;
//	NSLog(@"ProcessXml returned the value: %@", result);
    
    //nactena data
    //provest proces nacteni dat dle obsahu
    if (![result isEqualToString:@""]){
        //provest nacteni potrebnych dat
        NSDictionary* xmlDict = [XMLReader dictionaryForXMLString:result error:nil];
        if (xmlDict.count>0){
            comAppDelegate *d = (comAppDelegate*)[[UIApplication sharedApplication] delegate];
            
            NSMutableArray *gadgets=[xmlDict valueForKey:@"RUNRESULT"];
//            NSLog(@"%@", gadgets);
            
            if (gadgets!=nil && [gadgets count]>0){
                gadgets = [gadgets valueForKey:@"USERDATA"];
//                NSLog(@"%@", gadgets);
                
                if (gadgets!=nil && [gadgets count]>0){
                    gadgets = [gadgets valueForKey:@"Gadgets"];
//                    NSLog(@"%@", gadgets);
                    
                    if (gadgets!=nil && [gadgets count]>0){
                        gadgets = [gadgets valueForKey:@"Gadget"];
                        
                        for (int i=0;i<[gadgets count];i++){
                            NSMutableDictionary *gg = [gadgets objectAtIndex:i];
                            [d.gadgetList addObject:gg];
                        } 
                        [d gg_added];
                    }
                }        
            }
        }        
    }
}


@end
